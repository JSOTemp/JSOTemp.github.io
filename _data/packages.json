{
  "nlpmodels": {
    "name": "NLPModels",
    "description": "This package provides general guidelines to represent optimization problems in Julia and a standardized API to evaluate the functions and their derivatives. The main objective is to be able to rely on that API when designing optimization solvers in Julia."
  },
  "cutest": {
    "name": "CUTEst",
    "description": "This package provides an interface to <a href=\"http://ccpforge.cse.rl.ac.uk/gf/project/cutest/wiki\">CUTEst</a>, a repository of constrained and unconstrained nonlinear programming problems for testing and comparing optimization algorithms, derived from the abstract model on NLPModels."
  },
  "optimize": {
    "name": "Optimize",
    "description": "Optimization Algorithms in Pure Julia. The focus is to provide large-scale efficient and robust methods. Uses NLPModels for unified access to all problems above. Also defines tools for benchmarking and profiling codes using the same API."
  },
  "amplnlreader": {
    "name": "AmplNLReader",
    "description": "Provides access to <a href=\"http://www.ampl.com/\">AMPL</a> Models. Uses NLPModels.jl."
  },
  "optimizationproblems": {
    "name": "OptimizationProblems",
    "description": "Implements several problem in <a href=\"https://github.com/JuliaOpt/JuMP.jl\">JuMP</a> format. Can be used with NLPModels for easy multiplatform access to problems."
  },
  "nlsproblems": {
    "name": "NLSProblems",
    "description": "This package provides some optimization problems using the NLPModels interface. It is similar to to OptimizationProblems, except that it's specific for Nonlinear Least Squares, using the subtype AbstractNLSModels."
  },
  "krylov": {
    "name": "Krylov",
    "description": "This package implements iterative methods for the solution of linear systems of equations and linear least-squares problems.  It is appropriate, in particular, in situations where such a problem must be solved but a factorization is not possible"
  },
  "linearoperators": {
    "name": "LinearOperators",
    "description": "Operators behave like matrices (with some exceptions) but are defined by their effect when applied to a vector. They can be transposed, conjugated, or combined with other operators cheaply. The costly operation is deferred until multiplied with a vector."
  },
  "benchmarkprofiles": {
    "name": "BenchmarkProfiles",
    "description": "Julia translation of the <a href=\"http://www.mcs.anl.gov/~wild/dfo/benchmarking\">performance and data profiles</a> of Elizabeth Dolan, Jorge Moré and Stefan Wild. Uses the Plots library, enabling the use of various backends."
  },
  "amd": {
    "name": "AMD",
    "description": "Given a square sparse matrix, compute an approximate minimum degree ordering. This package is an interface to the AMD library of Amestoy, Davis and Duff."
  },
  "hsl": {
    "name": "HSL",
    "description": "Julia interface to some <a href=\"http://www.hsl.rl.ac.uk/\">HSL</a> packages for sparse linear algebra."
  },
  "mumps": {
    "name": "MUMPS",
    "description": "Julia interface to <a href=\"http://mumps.enseeiht.fr/\">MUMPS</a>. MUMPS is a library for the solution of large linear systems using a factorization. Structure can be exploited, such as symmetry, or symmetry and definiteness. The factorization and solve phases can be performed in parallel."
  },
  "propack": {
    "name": "PROPACK",
    "description": "A Julia interface to <a href=\"http://sun.stanford.edu/~rmunk/PROPACK\">PROPACK</a>, a library for the computation of the truncated singular value decomposition of matrices or linear operators. PROPACK only requires operator-vector products to estimate singular values and singular vectors."
  },
  "qr_mumps": {
    "name": "qr_mumps",
    "description": "Interface to multicore QR factorization qr_mumps. Currentyl broken."
  },
  "ldl": {
    "name": "LDL",
    "description": "A translation of Tim Davis's Concise LDL Factorization, part of <a href=\"http://faculty.cse.tamu.edu/davis/suitesparse.html\">SuiteSparse</a>. This package is appropriate for matrices A that possess a factorization of the form LDLᵀ without pivoting, where L is unit lower triangular and D is diagonal (indefinite in general), including definite and quasi-definite matrices."
  },
  "lldl": {
    "name": "LLDL",
    "description": "A Port of LLDL to Julia See <a href=\"https://github.com/optimizers/lldl\">optimizers/lldl</a>. LLDL is a limited-memory LDL' factorization for symmetric matrices."
  }
}
